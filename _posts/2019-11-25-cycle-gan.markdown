---
layout: default
title:  "CycleGAN日记"
date:   2019-11-25 19:00:00
categories: network
---

# CycleGAN

CycleGAN 是一种Gan（生成式对抗网络）。用于对两个成对图片域X和域Y间进行映射。

文章： [Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks](https://arxiv.org/abs/1703.10593)

[文章对应网站](https://junyanz.github.io/CycleGAN/)

# 理论模型

图片源域：$X$, 图片目标域$Y$

正映射$G$：$G:X \rightarrow Y$, 负映射$G$：$F:Y \rightarrow X$

## 模型构成

该模型由两个判别器和生成器构成

两个判别器可标记为 $D_X$, $D_Y$，分别对图片是否属于A或者B进行判断

两个生成去可标记为 $G$， $F$，分别为从$X$到$Y$和从$Y$到$X$的映射

## 目标函数

$G^\star, F^\star=arg\, \underset {G,F}{\min} \underset{D_X,D_Y}{\max} L(G, F, D_X, D_Y)=L_{GAN}(G, D_Y, X, Y) + L_{GAN}(F, D_X, Y, X)+ \lambda L_{cyc}(G, F)$

* $L_{GAN}(F, D_X, Y, X)=E_{x \sim p_{data}(x)}[\log D_X(x)]+E_{y\sim p_{data}(y)}[\log (1-D_X(F(y)))]$
* $L_{GAN}(G, D_Y, X, Y)=E_{y \sim p_{data}(y)}[\log D_Y(y)]+E_{x\sim p_{data}(x)}[\log (1-D_Y(G(x)))]$
* $L_{cyc}(G, F)=E_{y\sim p_{data}(y)}[\|\|F(G(x))-x\|\|]+E_{y\sim p_{data}(y)}[\|\|G(F(y))-y\|\|]$

## 训练过程

``` mermaid
graph TD
    subgraph Input
        ImageInputX["X"]
        ImageInputY["Y"]
        RealLabel["RealLabel"]
    end

    subgraph NetResult
        FX["F(X)"]
        FY["F(Y)"]
        FGX["F(G(X))"]
        GX["G(X)"]
        GY["G(Y)"]
        GFY["G(F(Y))"]
    end

    subgraph Output
        TotalLoss["L_total(weighted sum)"]
        GANLoss["L_GAN(mean)"] --> TotalLoss
        GANLossX["L_GANX(mse/bce)"] --> GANLoss
        GANLossY["L_GANY(mse/bce)"] --> GANLoss
        CycLoss["L_cyc(mean)"] --> TotalLoss
        CycLossX["L_cycX(mae)"] --> CycLoss
        CycLossY["L_cycY(mae)"] --> CycLoss
        IdLoss["L_id(mean)"] --> TotalLoss
        IdLossX["L_idX(mae)"] --> IdLoss
        IdLossY["L_idY(mae)"] --> IdLoss
    end

    FX --> IdLossX
    ImageInputX --> IdLossX
    GY --> IdLossY
    ImageInputY --> IdLossY

    FY --> GANLossX
    RealLabel --> GANLossX
    GX --> GANLossY
    RealLabel --> GANLossY

    FGX --> CycLossX
    ImageInputX --> CycLossX
    GFY --> CycLossY
    ImageInputY --> CycLossX
```

# 网络实现

## 判别器

* basic
* imageGAN
* n_layers

## 生成器

* encoder_decoder
* unet128
* unet256
* resnet_6blocks
* resnet_9blocks
